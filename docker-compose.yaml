version: '3.9'

services:
  # admin-service ------------------------------------
  admin_postgres:
    image: postgres:13
    restart: always 
    volumes:
      - database-storage-admin:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: admin_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - 5432:5432
  admin_service:
    build:
      context: ./admin_service
    depends_on:
      - admin_postgres
    environment:
      SV_PORT: 8080
      DB_HOST: admin_postgres
      DB_PORT: 5432
      DB_USER: user
      DB_PASSWORD: password
      DB_NAME: admin_db
      JWT_SECRET=: ADMIN_SERVICE_SECRET_KEY
    ports:
      - 8080:8080
  # customer-service ------------------------------------
  customer_postgres:
    image: postgres:13
    restart: always 
    volumes:
      - database-storage-customer:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: customer_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - 5431:5432
  customer_service:
    build: 
      context: ./customer_service
    depends_on:
      - customer_postgres
    environment:
      DATABASE_HOST: customer_postgres
      DATABASE_USERNAME: user
      DATABASE_PASSWORD: password
      DATABASE_PORT: 5432
      DATABASE_NAME: customer_db
      DATABASE_URL: postgresql://user:password@customer_postgres:5432/customer_db?sslmode=disable
      SERVER_PORT: 8082
    ports:
      - 8082:8082
  # housekeeper-service ------------------------------------
  housekeeper_postgres:
    image: postgres:13
    restart: always 
    volumes:
      - database-storage-housekeeper:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: housekeeper_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - 5434:5432
  housekeeper_service:
    build: 
      context: ./housekeeper_service
    depends_on:
      - housekeeper_postgres
    environment:
      SV_PORT: 8083
      DB_HOST: housekeeper_postgres
      DB_PORT: 5432
      DB_USER: user
      DB_PASSWOR: password
      DB_NAME: housekeeper_db
      JWT_SECRET: HOUSEKEEPER_SERVICE_SECRET_KEY
    ports:
      - 8083:8083
  # appointment-service ------------------------------------
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"

  app_kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
      - "9093:9093"
    expose:
      - "9093"
      - "9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://app_kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CREATE_TOPICS: "create_appointment:1:1"  # Topic with 1 partition and 1 replication factor
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  app_mongodb:
    image: mongo:latest
    ports:
      - "27016:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: password

  app_postgres:
    image: postgres:latest
    ports:
      - "5433:5432"
    volumes:
      - database-storage-appointment:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: appointment_db
  
  appointment_service:
    build: 
      context: ./appointment_service
    depends_on:
      - zookeeper
      - app_kafka
      - app_mongodb
      - app_postgres
    environment:
      HTTPPort: 8081
      DB_HOST: app_postgres
      DB_PORT: 5432
      DB_USER: user
      DB_NAME: appointment_db
      DB_PASSWORD: password
      DB_SSLMODE: disable
      POSTGRES_DSN: postgres://user:password@app_postgres:5432/appointment_db?sslmode=disable
      MONGO_DSN: mongodb://user:password@app_mongodb:27016
      MONGO_DB_NAME: appointment_service
      KAFKA_BROKER: app_kafka:9092
      CUSTOMER_SERVICE_GRPC_HOST: customer_service:18081
      HOUSEKEEPER_SERVICE_GRPC_HOST: housekeeper_service:18082
    ports:
      - 8081:8081

  # api-gateway ------------------------------------
  api-gateway:
    build:
      context: ./api-gateway
    environment:
      PORT: 3000
      EXAMPLE_URI: http://localhost:4000
      EXAMPLE_SECRET: hehe
      ADMIN_URI: http://admin_service:8080
      ADMIN_SECRET: ADMIN_SERVICE_SECRET_KEY
      CUSTOMER_URI: http://customer_service:8082
      CUSTOMER_SECRET: CUSTOMER_SERVICE_SECRET_KEY
      HOUSEKEEPER_URI: http://housekeeper_service:8083
      HOUSEKEEPER_SECRET: HOUSEKEEPER_SERVICE_SECRET_KEY
      APPOINTMENT_URI: http://appointment_service:8081

volumes:
  database-storage-admin:
  database-storage-customer:
  database-storage-housekeeper:
  database-storage-appointment:
  mongodb_data:
